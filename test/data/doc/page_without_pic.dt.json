{
  "schema_name": "DoclingDocument",
  "version": "1.3.0",
  "name": "Document",
  "furniture": {
    "self_ref": "#/furniture",
    "children": [],
    "content_layer": "furniture",
    "name": "_root_",
    "label": "unspecified"
  },
  "body": {
    "self_ref": "#/body",
    "children": [
      {
        "$ref": "#/texts/0"
      },
      {
        "$ref": "#/texts/1"
      },
      {
        "$ref": "#/texts/2"
      },
      {
        "$ref": "#/pictures/0"
      },
      {
        "$ref": "#/texts/3"
      },
      {
        "$ref": "#/texts/4"
      },
      {
        "$ref": "#/groups/0"
      },
      {
        "$ref": "#/texts/8"
      },
      {
        "$ref": "#/groups/1"
      },
      {
        "$ref": "#/texts/12"
      },
      {
        "$ref": "#/texts/13"
      }
    ],
    "content_layer": "body",
    "name": "_root_",
    "label": "unspecified"
  },
  "groups": [
    {
      "self_ref": "#/groups/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/5"
        },
        {
          "$ref": "#/texts/6"
        },
        {
          "$ref": "#/texts/7"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/1",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/9"
        },
        {
          "$ref": "#/texts/10"
        },
        {
          "$ref": "#/texts/11"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    }
  ],
  "texts": [
    {
      "self_ref": "#/texts/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "page_header",
      "prov": [
        {
          "page_no": 1,
          "bbox": {
            "l": 0.27,
            "t": 0.066,
            "r": 0.814,
            "b": 0.08,
            "coord_origin": "TOPLEFT"
          },
          "charspan": [
            0,
            60
          ]
        }
      ],
      "orig": "Optimized Table Tokenization for Table Structure Recognition",
      "text": "Optimized Table Tokenization for Table Structure Recognition"
    },
    {
      "self_ref": "#/texts/1",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "page_header",
      "prov": [
        {
          "page_no": 1,
          "bbox": {
            "l": 0.878,
            "t": 0.064,
            "r": 0.89,
            "b": 0.076,
            "coord_origin": "TOPLEFT"
          },
          "charspan": [
            0,
            1
          ]
        }
      ],
      "orig": "7",
      "text": "7"
    },
    {
      "self_ref": "#/texts/2",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "caption",
      "prov": [
        {
          "page_no": 1,
          "bbox": {
            "l": 0.136,
            "t": 0.112,
            "r": 0.89,
            "b": 0.16,
            "coord_origin": "TOPLEFT"
          },
          "charspan": [
            0,
            207
          ]
        }
      ],
      "orig": "Fig. 3. OTSL description of table structure: A - table example; B - graphical representation of table structure; C - mapping structure on a grid; D - OTSL structure encoding; E - explanation on cell encoding",
      "text": "Fig. 3. OTSL description of table structure: A - table example; B - graphical representation of table structure; C - mapping structure on a grid; D - OTSL structure encoding; E - explanation on cell encoding"
    },
    {
      "self_ref": "#/texts/3",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [
        {
          "page_no": 1,
          "bbox": {
            "l": 0.136,
            "t": 0.382,
            "r": 0.38,
            "b": 0.398,
            "coord_origin": "TOPLEFT"
          },
          "charspan": [
            0,
            19
          ]
        }
      ],
      "orig": "4.2 Language Syntax",
      "text": "4.2 Language Syntax",
      "level": 1
    },
    {
      "self_ref": "#/texts/4",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [
        {
          "page_no": 1,
          "bbox": {
            "l": 0.136,
            "t": 0.412,
            "r": 0.636,
            "b": 0.426,
            "coord_origin": "TOPLEFT"
          },
          "charspan": [
            0,
            51
          ]
        }
      ],
      "orig": "The OTSL representation follows these syntax rules:",
      "text": "The OTSL representation follows these syntax rules:"
    },
    {
      "self_ref": "#/texts/5",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "1. Left-looking cell rule: The left neighbour of an \"L\" cell must be either another \"L\" cell or a \"C\" cell.",
      "text": "1. Left-looking cell rule: The left neighbour of an \"L\" cell must be either another \"L\" cell or a \"C\" cell.",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/6",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "2. Up-looking cell rule: The upper neighbour of a \"U\" cell must be either another \"U\" cell or a \"C\" cell.",
      "text": "2. Up-looking cell rule: The upper neighbour of a \"U\" cell must be either another \"U\" cell or a \"C\" cell.",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/7",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "3. Cross cell rule:",
      "text": "3. Cross cell rule:",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/8",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [
        {
          "page_no": 1,
          "bbox": {
            "l": 0.174,
            "t": 0.536,
            "r": 0.89,
            "b": 0.586,
            "coord_origin": "TOPLEFT"
          },
          "charspan": [
            0,
            167
          ]
        }
      ],
      "orig": "The left neighbour of an \"X\" cell must be either another \"X\" cell or a \"U\" cell, and the upper neighbour of an \"X\" cell must be either another \"X\" cell or an \"L\" cell.",
      "text": "The left neighbour of an \"X\" cell must be either another \"X\" cell or a \"U\" cell, and the upper neighbour of an \"X\" cell must be either another \"X\" cell or an \"L\" cell."
    },
    {
      "self_ref": "#/texts/9",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "4. First row rule: Only \"L\" cells and \"C\" cells are allowed in the first row.",
      "text": "4. First row rule: Only \"L\" cells and \"C\" cells are allowed in the first row.",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/10",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "5. First column rule: Only \"U\" cells and \"C\" cells are allowed in the first column.",
      "text": "5. First column rule: Only \"U\" cells and \"C\" cells are allowed in the first column.",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/11",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "6. Rectangular rule: The table representation is always rectangular - all rows must have an equal number of tokens, terminated with \"NL\" token.",
      "text": "6. Rectangular rule: The table representation is always rectangular - all rows must have an equal number of tokens, terminated with \"NL\" token.",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/12",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [
        {
          "page_no": 1,
          "bbox": {
            "l": 0.136,
            "t": 0.694,
            "r": 0.89,
            "b": 0.89,
            "coord_origin": "TOPLEFT"
          },
          "charspan": [
            0,
            848
          ]
        }
      ],
      "orig": "The application of these rules gives OTSL a set of unique properties. First of all, the OTSL enforces a strictly rectangular structure representation, where every new-line token starts a new row. As a consequence, all rows and all columns have exactly the same number of tokens, irrespective of cell spans. Secondly, the OTSL representation is unambiguous: Every table structure is represented in one way. In this representation every table cell corresponds to a \"C\"-cell token, which in case of spans is always located in the top-left corner of the table cell definition. Third, OTSL syntax rules are only backward-looking. As a consequence, every predicted token can be validated straight during sequence generation by looking at the previously predicted sequence. As such, OTSL can guarantee that every predicted sequence is syntactically valid.",
      "text": "The application of these rules gives OTSL a set of unique properties. First of all, the OTSL enforces a strictly rectangular structure representation, where every new-line token starts a new row. As a consequence, all rows and all columns have exactly the same number of tokens, irrespective of cell spans. Secondly, the OTSL representation is unambiguous: Every table structure is represented in one way. In this representation every table cell corresponds to a \"C\"-cell token, which in case of spans is always located in the top-left corner of the table cell definition. Third, OTSL syntax rules are only backward-looking. As a consequence, every predicted token can be validated straight during sequence generation by looking at the previously predicted sequence. As such, OTSL can guarantee that every predicted sequence is syntactically valid."
    },
    {
      "self_ref": "#/texts/13",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [
        {
          "page_no": 1,
          "bbox": {
            "l": 0.136,
            "t": 0.894,
            "r": 0.89,
            "b": 0.926,
            "coord_origin": "TOPLEFT"
          },
          "charspan": [
            0,
            153
          ]
        }
      ],
      "orig": "These characteristics can be easily learned by sequence generator networks, as we demonstrate further below. We find strong indications that this pattern",
      "text": "These characteristics can be easily learned by sequence generator networks, as we demonstrate further below. We find strong indications that this pattern"
    }
  ],
  "pictures": [
    {
      "self_ref": "#/pictures/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "picture",
      "prov": [
        {
          "page_no": 1,
          "bbox": {
            "l": 0.208,
            "t": 0.17,
            "r": 0.826,
            "b": 0.34,
            "coord_origin": "TOPLEFT"
          },
          "charspan": [
            0,
            0
          ]
        }
      ],
      "captions": [
        {
          "$ref": "#/texts/2"
        }
      ],
      "references": [],
      "footnotes": [],
      "annotations": []
    }
  ],
  "tables": [],
  "key_value_items": [],
  "form_items": [],
  "pages": {
    "1": {
      "size": {
        "width": 1.0,
        "height": 1.0
      },
      "page_no": 1
    }
  }
}
